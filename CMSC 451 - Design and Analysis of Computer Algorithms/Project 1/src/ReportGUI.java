/* Project 1
 *
 * Name: Luis Moreno
 * Date: May 1, 2023
 * Class: CMSC 451 7380 Design and Analysis of Computer Algorithms (2232)
 *
 * This program reads text files generated by BenchmarkSorts.java.
 * Data from the text file is used to calculate averages and coefficients of variance.
 *
 * The user selects the text file using a JFileChooser window. If the text file
 * is processed properly, a new window will display the data calculations in a JTable.
 */

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.io.*;

public class ReportGUI extends JFrame {
    private static File file;
    private static Object[][] tableData = new Object[12][5];
    private static boolean fileWorks;       // flag for creating window with data table

    public ReportGUI() {
        String[] columnNames = {"Size", "Avg Count", "Coef Count", "Avg Time", "Coef Time"};

        JTable table = new JTable(tableData, columnNames);
        table.setGridColor(Color.BLACK);
        table.setShowGrid(true);

        JPanel main = new JPanel();
        main.setLayout(new BorderLayout());
        main.add(table.getTableHeader(), BorderLayout.PAGE_START);
        main.add(table, BorderLayout.CENTER);

        add(main);

        // JFrame settings
        setTitle(file.getName());
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        pack();
        setLocationRelativeTo(null);
        setVisible(true);
    }

    public static void main(String[] args) {
        openFile();
        if (fileWorks)
            new ReportGUI();
    }

    // opens file using JFileChooser
    private static void openFile() {
        fileWorks = false;

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Open file");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Text files", "txt"));

        int result = fileChooser.showOpenDialog(null);

        if (result == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
            readFile();
        } else if (result == JFileChooser.CANCEL_OPTION) {
            System.out.println("User canceled file chooser.");
        } else {
            JOptionPane.showMessageDialog(null, "ERROR: File could not be loaded.");
        }
    }

    // Reads the text file line-by-line and builds the table to be displayed line-by-line
    private static void readFile() {
        try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            String line;
            int i = 0;
            while((line = br.readLine()) != null) {
                String[] numbers = line.split(" ");
                makeDataTable(numbers, i);
                i++;
            }
            br.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "ERROR: Failed to read file.");
        }
        fileWorks = true;       // data table can be displayed now
    }

    // Averages and coefficients of variance are calculated for critical operations count and times
    private static void makeDataTable(String[] numbers, int i) {
        double countSum = 0;
        double timeSum = 0;
        double countSdSum = 0;
        double timeSdSum = 0;

        for (int j = 1; j < numbers.length; j += 2) {
            countSum += Double.parseDouble(numbers[j]);
            timeSum += Double.parseDouble(numbers[j + 1]);
        }

        double countAvg = countSum / 40;
        double timeAvg = timeSum / 40;

        /* population standard deviation (s.d.) = sqrt((sumOf(x - avg)^2) / n)
         *
         * coefficient of variation = s.d. / avg
         */
        for (int j = 1; j < numbers.length; j += 2) {
            countSdSum += Math.pow(Double.parseDouble(numbers[j]) - countAvg, 2);
            timeSdSum += Math.pow(Double.parseDouble(numbers[j + 1]) - timeAvg, 2);
        }

        double countSd = Math.sqrt(countSdSum/40);
        double timeSd = Math.sqrt(timeSdSum/40);

        tableData[i][0] = Integer.parseInt(numbers[0]);
        tableData[i][1] = String.format("%.2f", countAvg);
        tableData[i][2] = String.format("%.2f%%", (countSd / countAvg) * 100);
        tableData[i][3] = String.format("%.2f", timeAvg);
        tableData[i][4] = String.format("%.2f%%", (timeSd / timeAvg) * 100);
    }
}
